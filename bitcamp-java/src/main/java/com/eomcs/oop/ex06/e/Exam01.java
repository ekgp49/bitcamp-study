// 다형적 변수와 오버라이딩
package com.eomcs.oop.ex06.e;

public class Exam01 {
  public static void main(String[] args) {
    A a = new A();
    // A 객체 사용
    a.m();
    //((A2)a).x(); // a를 A2라고 우김 컴파일러는 통과, 런타임 오류
    
    System.out.println("-------------------------");

    A2 a2 = new A2();
    // A2 객체 사용
    a2.m(); // 이때 m()은 A2가 재정의한 메서드이다.
    a2.x();

    System.out.println("-------------------------");

    // 다형적 변수와 오버라이딩 메서드
    A a3 = new A2(); // 수퍼 클래스의 래퍼런스는 서브 클래스의 객체 주소를 담을 수 있다.
    // 수퍼 클래스의 레퍼런스는 서브 클래스의 객체를 가리킬 수 있다.

    // 주의!
    a3.m(); 
    // 레퍼런스가 하위 클래스의 인스턴스를 가리킬 때,
    // 레퍼런스를 통해 호출하는 메서드가 하위 클래스에서 오버라이딩 한 것이라면
    // 그 오버라이딩한 메서드를 호출한다

    // 그렇다고 해서 A2에서 추가한 메서드를 호출할 수 있는건 아니다.
    
    //a3.x(); // 컴파일 오류!
    // 비록 a3에는 실제로 A2 객체의 주소가 저장되어 있지만,
    // 컴파일러는 a3가 실제 가리키는 객체에 관심이 없고,
    // a3가 어떤 클래스의 변수인지만 확인한다.
    // a3는 A 클래스의 변수이기 때문에
    // 오직 A 클래스의 멤버(변수,메서드)만 사용할 수 있다.
    
    // 물론 a3가 가리키는건 A2의 인스턴스이기 때문에 형변환을 한 다음엔 A2 클래스의 멤버를 사용할 수 있다.
    ((A2)a3).x();
  }
}






